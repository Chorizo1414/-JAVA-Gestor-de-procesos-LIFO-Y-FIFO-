/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package procesos;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.Timer;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.text.BadLocationException;



/**
 *
 * @author johaa
 */
public class INTERFAZ extends javax.swing.JFrame {
    private int contador = 1;
    DefaultTableModel modelo;
    /**
     * Creates new form INTERFAZ
     */
    public INTERFAZ() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        NOMBRE_PROCESO = new javax.swing.JTextField();
        BARRA = new javax.swing.JProgressBar();
        BT_INSERTAR = new javax.swing.JButton();
        CONTADOR = new javax.swing.JLabel();
        BT_BORRAR = new javax.swing.JButton();
        TIEMPO_PROCESO = new javax.swing.JTextField();
        BT_LIFO = new javax.swing.JButton();
        BT_FIFO = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        MensajeLog = new javax.swing.JTextPane();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        NOMBRE_PROCESO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NOMBRE_PROCESOActionPerformed(evt);
            }
        });

        BT_INSERTAR.setText("INSERTAR");
        BT_INSERTAR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BT_INSERTARActionPerformed(evt);
            }
        });

        CONTADOR.setBackground(new java.awt.Color(204, 204, 204));
        CONTADOR.setFont(new java.awt.Font("MS UI Gothic", 1, 36)); // NOI18N
        CONTADOR.setForeground(new java.awt.Color(51, 51, 51));
        CONTADOR.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        BT_BORRAR.setText("BORRAR PROCESO");
        BT_BORRAR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BT_BORRARActionPerformed(evt);
            }
        });

        TIEMPO_PROCESO.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TIEMPO_PROCESOKeyTyped(evt);
            }
        });

        BT_LIFO.setText("EJECUTAR EN LIFO");
        BT_LIFO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BT_LIFOActionPerformed(evt);
            }
        });

        BT_FIFO.setText("EJECUTAR EN FIFO");
        BT_FIFO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BT_FIFOActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No. Proceso", "Nombre", "Tiempo"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(130, 130, 130), 2, true), "Log"));

        MensajeLog.setEditable(false);
        jScrollPane2.setViewportView(MensajeLog);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 233, Short.MAX_VALUE)
                .addContainerGap())
        );

        jLabel1.setText("Nombre del proceso:");

        jLabel2.setText("Tiempo del proceso (SEGUNDOS):");

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No. Proceso", "Nombre", "Tiempo"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(jTable2);
        if (jTable2.getColumnModel().getColumnCount() > 0) {
            jTable2.getColumnModel().getColumn(0).setPreferredWidth(1);
            jTable2.getColumnModel().getColumn(1).setPreferredWidth(150);
            jTable2.getColumnModel().getColumn(2).setPreferredWidth(1);
        }

        jLabel3.setFont(new java.awt.Font("Yu Gothic UI Semibold", 1, 24)); // NOI18N
        jLabel3.setText("PROCESOS TERMINADOS:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(BT_LIFO)
                        .addGap(18, 18, 18)
                        .addComponent(BT_FIFO))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel2)
                            .addGap(18, 18, 18)
                            .addComponent(TIEMPO_PROCESO))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel1)
                            .addGap(34, 34, 34)
                            .addComponent(NOMBRE_PROCESO, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(BT_INSERTAR)
                        .addGap(18, 18, 18)
                        .addComponent(BT_BORRAR))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 343, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(BARRA, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(CONTADOR, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 423, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addContainerGap(17, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 397, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(CONTADOR, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(BARRA, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel1)
                                    .addComponent(NOMBRE_PROCESO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel2)
                                    .addComponent(TIEMPO_PROCESO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(23, 23, 23)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(BT_INSERTAR)
                                    .addComponent(BT_BORRAR))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(BT_LIFO)
                                    .addComponent(BT_FIFO))))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void TIEMPO_PROCESOKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TIEMPO_PROCESOKeyTyped
        int key = evt.getKeyChar();

        boolean numero = key >= 48 && key <= 57;

        if (!numero) {
            evt.consume();
        }
    }//GEN-LAST:event_TIEMPO_PROCESOKeyTyped

    private void NOMBRE_PROCESOActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NOMBRE_PROCESOActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_NOMBRE_PROCESOActionPerformed

    private void BT_INSERTARActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BT_INSERTARActionPerformed
    String nombreProceso = NOMBRE_PROCESO.getText();
    int tiempoProceso = Integer.parseInt(TIEMPO_PROCESO.getText());

    // Crea un nuevo objeto para la fila de la tabla
    Object[] fila = new Object[3];
    fila[0] = contador;
    fila[1] = nombreProceso;
    fila[2] = tiempoProceso;

    // Añade la fila a la tabla
    modelo = (DefaultTableModel) jTable1.getModel();
    modelo.addRow(fila);

    // Incrementa el contador para el próximo proceso
    contador++;
    
    // Limpia las casillas de nombre y tiempo
    NOMBRE_PROCESO.setText("");
    TIEMPO_PROCESO.setText("");
    }//GEN-LAST:event_BT_INSERTARActionPerformed

    private void BT_BORRARActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BT_BORRARActionPerformed

    String numeroProcesoStr = JOptionPane.showInputDialog("Introduce el numero del proceso a borrar:");
    int numeroProceso = Integer.parseInt(numeroProcesoStr);

    // Encuentra y borra la fila correspondiente en la tabla
    DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
    for (int i = 0; i < model.getRowCount(); i++) {
        if ((int) model.getValueAt(i, 0) == numeroProceso) {
            model.removeRow(i);
            break;
        }
    }

    // Ajusta los números de los procesos restantes
    for (int i = 0; i < model.getRowCount(); i++) {
        model.setValueAt(i + 1, i, 0);
    }
    }//GEN-LAST:event_BT_BORRARActionPerformed

    private void BT_LIFOActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BT_LIFOActionPerformed
                                       
    DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
    DefaultTableModel model2 = (DefaultTableModel) jTable2.getModel(); // Modelo de la tabla jTable2

    // Crea un Timer que se ejecute cada segundo
    Timer timer = new Timer(1000, null);
    timer.addActionListener(new ActionListener() {
        int i = model.getRowCount() - 1; // Comienza por el último proceso insertado
        int tiempoRestante = i >= 0 ? Integer.parseInt(model.getValueAt(i, 2).toString()) : 0;

        @Override
        public void actionPerformed(ActionEvent e) {
            if (tiempoRestante == 0) {
                if (i >= 0) {
                    // Actualiza el JTextPane con el proceso completado
                    try {
                        MensajeLog.getDocument().insertString(MensajeLog.getDocument().getLength(), "Proceso " + model.getValueAt(i, 1).toString() + " completado.\n\n", null);
                    } catch (BadLocationException ex) {
                        ex.printStackTrace();
                    }

                    // Añade el proceso completado a jTable2
                    Object[] filaCompletada = new Object[]{
                        model.getValueAt(i, 0),
                        model.getValueAt(i, 1),
                        model.getValueAt(i, 2)
                    };
                    model2.addRow(filaCompletada);

                    // Borra el proceso de la tabla jTable1
                    model.removeRow(i);

                    // Prepara el siguiente proceso LIFO
                    i--;
                    if (i >= 0) {
                        tiempoRestante = Integer.parseInt(model.getValueAt(i, 2).toString());
                        CONTADOR.setText(model.getValueAt(i, 1).toString() + ": " + tiempoRestante);
                        BARRA.setMaximum(Integer.parseInt(model.getValueAt(i, 2).toString())); // Establece el máximo de la barra de progreso
                        BARRA.setValue(tiempoRestante); // Actualiza el valor de la barra de progreso
                    }
                } else {
                    // Si no hay más procesos, detén el Timer
                    ((Timer) e.getSource()).stop();
                }
            } else {
                // Si el proceso aún no ha terminado, decrementa el tiempo restante y actualiza el JLabel y la barra de progreso
                tiempoRestante--;
                CONTADOR.setText(model.getValueAt(i, 1).toString() + ": " + tiempoRestante);
                BARRA.setValue(tiempoRestante); // Actualiza el valor de la barra de progreso
                // Actualiza el JTextPane con el estado del proceso
                try {
                    MensajeLog.getDocument().insertString(MensajeLog.getDocument().getLength(), "Ejecutando: " + model.getValueAt(i, 1).toString() + "\nEstado: En curso   Tiempo restante: " + tiempoRestante + " segundos\n", null);
                } catch (BadLocationException ex) {
                    ex.printStackTrace();
                }
            }
        }
    });

    // Inicia el Timer
    timer.start();
    }//GEN-LAST:event_BT_LIFOActionPerformed

    private void BT_FIFOActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BT_FIFOActionPerformed
                                          
    DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
    DefaultTableModel model2 = (DefaultTableModel) jTable2.getModel(); // Modelo de la tabla jTable2

    // Crea un Timer que se ejecute cada segundo
    Timer timer = new Timer(1000, null);
    timer.addActionListener(new ActionListener() {
        int i = 0;
        int tiempoRestante = Integer.parseInt(model.getValueAt(i, 2).toString());

        @Override
        public void actionPerformed(ActionEvent e) {
            if (tiempoRestante == 0) {
                // Actualiza el JTextPane con el proceso completado
                try {
                    MensajeLog.getDocument().insertString(MensajeLog.getDocument().getLength(), "Proceso " + model.getValueAt(i, 1).toString() + " completado.\n\n", null);
                } catch (BadLocationException ex) {
                    ex.printStackTrace();
                }

                // Añade el proceso completado a jTable2
                Object[] filaCompletada = new Object[]{
                    model.getValueAt(i, 0),
                    model.getValueAt(i, 1),
                    model.getValueAt(i, 2)
                };
                model2.addRow(filaCompletada);

                // Borra el proceso de la tabla jTable1
                model.removeRow(i);

                // Si hay más procesos, obtén el tiempo del siguiente proceso
                if (i < model.getRowCount()) {
                    tiempoRestante = Integer.parseInt(model.getValueAt(i, 2).toString());
                    CONTADOR.setText(model.getValueAt(i, 1).toString() + ": " + tiempoRestante);
                    BARRA.setMaximum(Integer.parseInt(model.getValueAt(i, 2).toString())); // Establece el máximo de la barra de progreso
                    BARRA.setValue(tiempoRestante); // Actualiza el valor de la barra de progreso
                } else {
                    // Si no hay más procesos, detén el Timer
                    ((Timer) e.getSource()).stop();
                }
            } else {
                // Si el proceso aún no ha terminado, decrementa el tiempo restante y actualiza el JLabel y la barra de progreso
                tiempoRestante--;
                CONTADOR.setText(model.getValueAt(i, 1).toString() + ": " + tiempoRestante);
                BARRA.setValue(tiempoRestante); // Actualiza el valor de la barra de progreso
                // Actualiza el JTextPane con el estado del proceso
                try {
                    MensajeLog.getDocument().insertString(MensajeLog.getDocument().getLength(), "Ejecutando: " + model.getValueAt(i, 1).toString() + "\nEstado: En curso   Tiempo restante: " + tiempoRestante + " segundos\n", null);
                } catch (BadLocationException ex) {
                    ex.printStackTrace();
                }
            }
        }
    });

    // Inicia el Timer
    timer.start();
    }//GEN-LAST:event_BT_FIFOActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(INTERFAZ.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(INTERFAZ.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(INTERFAZ.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(INTERFAZ.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new INTERFAZ().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JProgressBar BARRA;
    private javax.swing.JButton BT_BORRAR;
    private javax.swing.JButton BT_FIFO;
    private javax.swing.JButton BT_INSERTAR;
    private javax.swing.JButton BT_LIFO;
    private javax.swing.JLabel CONTADOR;
    private javax.swing.JTextPane MensajeLog;
    private javax.swing.JTextField NOMBRE_PROCESO;
    private javax.swing.JTextField TIEMPO_PROCESO;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    // End of variables declaration//GEN-END:variables
}
